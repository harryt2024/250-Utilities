// This is your Prisma schema file.
// It defines your database models and the relationships between them.

// Specifies the Prisma Client generator.
generator client {
  provider = "prisma-client-js"
}

// Defines the database connection.
// The URL is loaded from the .env.local file for security.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model for Users
// Stores user credentials, personal info, and role.
model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  password           String               @db.VarChar(255) // Hashed password
  fullName           String
  role               Role                 @default(USER)
  createdAt          DateTime             @default(now())

  // --- Relations ---
  originalDutiesSenior DutyRota[] @relation("OriginalDutySenior")
  originalDutiesJunior DutyRota[] @relation("OriginalDutyJunior")
  actualDutiesSenior   DutyRota[] @relation("ActualDutySenior")
  actualDutiesJunior   DutyRota[] @relation("ActualDutyJunior")
  lessonsCreated     Lesson[]             @relation("CreatedBy")
  lessonAssignments  LessonAssignment[]
  uniformItemsAdded UniformItem[]
  absences           Absence[]

  // NextAuth.js specific fields for the adapter
  accounts Account[]
  sessions Session[]
}

// Model for Lessons
// Stores details for each scheduled lesson or activity.
model Lesson {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?              @db.Text
  lessonDate         DateTime             @db.Date

  // --- Relations ---
  createdBy          User                 @relation("CreatedBy", fields: [createdById], references: [id])
  createdById        Int
  assignments        LessonAssignment[]
  resources          LessonResource[]
}

// Join table to link Users (NCOs) to Lessons.
model LessonAssignment {
  id        Int      @id @default(autoincrement())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  // Ensures a user can only be assigned to a lesson once.
  @@unique([lessonId, userId])
}

model UniformItem {
  id          Int              @id @default(autoincrement())
  type        UniformType
  size        String
  condition   UniformCondition
  addedAt     DateTime         @default(now())
  addedBy     User             @relation(fields: [addedById], references: [id])
  addedById   Int

  // Add this new relation to your existing User model
  // User model:
  // uniformItemsAdded UniformItem[]
}

enum UniformType {
  MENS_TROUSERS
  MENS_WEDGEWOOD_SHIRT
  MENS_WORKING_BLUE_SHIRT
  BRASSARD
  BLUE_GREY_BELT
  BLACK_SOCKS
  BLACK_LEATHER_GLOVES
  WOMENS_TROUSERS
  WOMENS_SLACKS
  WOMENS_WORKING_BLUE_SHIRT
  WOMENS_SKIRT
  WOMENS_WEDGEWOOD_SHIRT
  FOUL_WEATHER_JACKET
  BERET_AND_BADGE
  MISC
}

enum UniformCondition {
  NEW
  GOOD
  SERVICEABLE
  POOR
}


// Model for Lesson Resources
// Stores information about uploaded files for each lesson.
model LessonResource {
  id         Int      @id @default(autoincrement())
  fileName   String
  filePath   String   // Path to the file on the server
  uploadedAt DateTime @default(now())

  // --- Relations ---
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   Int
}

// Model for the Duty Rota
// Assigns Duty Senior and Duty Junior for a specific date.
model DutyRota {
  id             Int      @id @default(autoincrement())
  dutyDate       DateTime @unique @db.Date

  // Who was originally scheduled
  originalSenior   User     @relation("OriginalDutySenior", fields: [originalSeniorId], references: [id])
  originalSeniorId Int
  originalJunior   User     @relation("OriginalDutyJunior", fields: [originalJuniorId], references: [id])
  originalJuniorId Int

  // Who actually performed the duty
  actualSenior     User     @relation("ActualDutySenior", fields: [actualSeniorId], references: [id])
  actualSeniorId   Int
  actualJunior     User     @relation("ActualDutyJunior", fields: [actualJuniorId], references: [id])
  actualJuniorId   Int

  seniorStatus DutyStatus @default(UNCONFIRMED)
  juniorStatus DutyStatus @default(UNCONFIRMED)
}

// Enum for User Roles
enum Role {
  USER
  ADMIN
}

enum DutyStatus {
  UNCONFIRMED
  ATTENDED
  ABSENT
}


// --- NextAuth.js Models ---
// These are required by the @next-auth/prisma-adapter

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Absence {
  id        Int      @id @default(autoincrement())
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  reason    String?  @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

